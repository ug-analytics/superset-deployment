postgresql:
  enabled: false

supersetCeleryBeat:
  enabled: true

extraEnv:
  AUTH_DOMAIN: userguiding.com
  PREFERRED_URL_SCHEME: https

envFromSecrets:
  - '{{ template "superset.fullname" . }}-env' # existing default secret
  - superset-oauth-secret

configOverrides:
  secret: |
    SECRET_KEY = 'j3iyk1bldRa86wkaf0R15rgoCnuaWFFw2Y1AdGCYGOhs4vkckjZXWVbM'
  enable_oauth: |
    # This will make sure the redirect_uri is properly computed, even with SSL offloading
    ENABLE_PROXY_FIX = True

    from flask_appbuilder.security.manager import AUTH_OAUTH
    AUTH_TYPE = AUTH_OAUTH
    OAUTH_PROVIDERS = [
        {
            "name": "google",
            "icon": "fa-google",
            "token_key": "access_token",
            "remote_app": {
                "client_id": os.getenv("GOOGLE_KEY"),
                "client_secret": os.getenv("GOOGLE_SECRET"),
                "api_base_url": "https://www.googleapis.com/oauth2/v2/",
                "client_kwargs": {"scope": "email profile"},
                "request_token_url": None,
                "access_token_url": "https://accounts.google.com/o/oauth2/token",
                "authorize_url": "https://accounts.google.com/o/oauth2/auth",
                "authorize_params": {"hd": os.getenv("AUTH_DOMAIN", "")}
            },
        }
    ]

    # Map Authlib roles to superset roles
    AUTH_ROLE_ADMIN = 'Admin'
    AUTH_ROLE_PUBLIC = 'Public'

    # Will allow user self registration, allowing to create Flask users from Authorized User
    AUTH_USER_REGISTRATION = True

    # The default user self registration role
    AUTH_USER_REGISTRATION_ROLE = "Admin"

image:
  repository: 651017398184.dkr.ecr.us-east-2.amazonaws.com/superset-ug
  tag: latest
  pullPolicy: Always

supersetNode:
  connections:
    db_host: userguiding-sandbox.c1somsjlvjib.us-east-2.rds.amazonaws.com
    db_port: 5432
    db_user: postgres
    db_pass: N2qKh3FLLNYc66rY
    db_name: superset

nodeSelector:
  superset-platform: "true"
  superset-workers: "true"
